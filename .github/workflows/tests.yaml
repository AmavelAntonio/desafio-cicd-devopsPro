name: Running tests

on: 
  workflow_call:

jobs:
  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest
    steps:
      - name: Getting project code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.300"

      - name: Running Unit Tests
        working-directory: ./src
        run: dotnet test ./Review-Filmes.Test.Unit/Review-Filmes.Test.Unit.csproj

  integration-tests:
    name: Integration Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: review
          POSTGRES_PASSWORD: postgrespwd
          POSTGRES_DB: review-filmes

    steps:
      - name: Getting project code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.300"

      - name: Running Integration Tests
        working-directory: ./src
        run: dotnet test ./Review-Filmes.Test.Integration/Review-Filmes.Test.Integration.csproj
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=review-filmes;Username=review;Password=postgrespwd"
  
  sonarqube:
    name: Scan with sonarqube
    runs-on: ubuntu-latest
    steps:
      - name: Getting project code
        uses: actions/checkout@v4
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: adopt
          java-version: '21'
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.300"
        
      - name: installing Sonarqube Scanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Build and analyze
        working-directory: ./src
        run: |
          dotnet sonarscanner begin /k:"filme" /d:sonar.host.url= ${{ secrets.SONAR_HOST_URL }}/d:sonar.token=${{ secrets.SONAR_TOKEN }}
          dotnet build ./Review-Filmes.sln
          dotnet sonarscanner end /d:sonar.token=${{ secrets.SONAR_TOKEN }}
      
      - name: Check quality gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        id: sonarqube-quality-gate-check
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN}}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          scanMetadataReportFile: ./src/.sonarqube/.sonar/report-task.txt
        
      - name: "Show Qualilty Gate Status"
        if: ${{ always() }}
        run: echo "The status of quality gate is ${{ steps.sonarqube-quality-gate-check.outputs.sonarqube-quality-gate-check }}"
        


    